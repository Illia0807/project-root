import { Request, Response, RequestHandler, NextFunction } from "express";
import {
  createUser,
  getUserById,
  getUserByUsername,
} from "../models/userModel"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥–µ–ª–∏
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
dotenv.config();

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// export const registerUser = async (

//   req: Request,
//   res: Response
// ): Promise<void> => {
//   const { username, password } = req.body;

//   console.log(process.env.JWT_SECRET);
//   const existingUser = await getUserByUsername(username);
//   if (existingUser) {
//     res
//       .status(400)
//       .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
//     return;
//   }

//   const hashedPassword = await bcrypt.hash(password, 10);
//   const newUser = await createUser(username, hashedPassword);
//   console.log("–•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", hashedPassword);

//   const token = jwt.sign({ userId: newUser.id }, process.env.JWT_SECRET!, {
//     expiresIn: "1h",
//   });

//   res
//     .status(201)
//     .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", token });
// };

// export const loginUser = async (req: Request, res: Response): Promise<void> => {
//   const { username, password } = req.body;
//   console.log(process.env.JWT_SECRET);

//   const user = await getUserByUsername(username);
//   if (!user) {
//     res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
//     return;
//   }
//   console.log('user.password:', user.password);
//   console.log('password:', password);

//   const isMatch = await bcrypt.compare(password, user.password);
//   if (!isMatch) {
//     res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
//     return;
//   }

//   const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET!, {
//     expiresIn: "1h",
//   });

//   res.status(200).json({ message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥", token });
// };

export const getMe = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = (req as any).user?.userId;

    if (!userId) {
      res.status(401).json({ message: "–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });
      return;
    }

    const user = await getUserById(userId);

    if (!user) {
      res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    const { password, ...safeUser } = user;
    res.json({ message: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω", user: safeUser });
  } catch (err) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è" });
  }
};

export const registerUser = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { username, password } = req.body;
    console.log("üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:");
    console.log("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", username);
    console.log("–ü–∞—Ä–æ–ª—å:", password);
    console.log("JWT_SECRET:", process.env.JWT_SECRET);

    const existingUser = await getUserByUsername(username);
    if (existingUser) {
      res
        .status(400)
        .json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
      return;
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    console.log("‚û°Ô∏è –•—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", hashedPassword);

    const newUser = await createUser(username, hashedPassword);
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", newUser);

    const token = jwt.sign({ userId: newUser.id }, process.env.JWT_SECRET!, {
      expiresIn: "1h",
    });

    res.status(201).json({
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
      token,
      userId: newUser.id,
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
  }
};

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUser = async (req: Request, res: Response): Promise<void> => {
  try {
    const { username, password } = req.body;
    console.log("üîê –í—Ö–æ–¥:");
    console.log("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", username);
    console.log("–í–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", password);
    console.log("JWT_SECRET:", process.env.JWT_SECRET);

    const user = await getUserByUsername(username);
    if (!user) {
      console.warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      return;
    }

    console.log("üßæ –ü–∞—Ä–æ–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", user.password);

    const isMatch = await bcrypt.compare(password, user.password);
    console.log("üîç –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π:", isMatch);

    if (!isMatch) {
      console.warn("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      return;
    }

    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET!, {
      expiresIn: "1h",
    });

    console.log("‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω");

    res.status(200).json({
      message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
      token,
      userId: user.id,
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ" });
  }
};
